---
layout: nil
---
@using System.Globalization;
@using System.IO;
@using System.Linq;
@using System.Text.RegularExpressions;
@using Pretzel.Logic.Templating.Context;
@using Page = Pretzel.Logic.Templating.Context.Page;
@{
    var dateRegex = new Regex( @"^.+20\d{2}$", RegexOptions.Compiled | RegexOptions.ExplicitCapture );

    var tagDict = new Dictionary<string, int>();
    foreach( var sitePage in Model.Site.Posts )
    {
        if( sitePage.Bag.ContainsKey( "tags" ) == false )
        {
            continue;
        }
        foreach( string tag in sitePage.Tags )
        {
            if( tagDict.ContainsKey( tag ) == false )
            {
                tagDict[tag] = 1;
            }
            else
            {
                tagDict[tag] = tagDict[tag] + 1;
            }
        }
    }

    string GetCategory( string tagName )
    {
        if( dateRegex.IsMatch( tagName ) )
        {
            return "date";
        }
        else if( tagName.EndsWith( "Background Pattern" ) )
        {
            return "background_pattern";
        }
        else if( tagName.EndsWith( "Pattern" ) )
        {
            return "pattern";
        }
        else if( tagName.EndsWith( "Background" ) )
        {
            return "background";
        }
        else if( tagName.EndsWith( "Outline" ) )
        {
            return "outline";
        }
        else
        {
            return "base_image";
        }
    }

    string GetDisplayName( string tagName )
    {
        if( dateRegex.IsMatch( tagName ) )
        {
            return tagName;
        }
        else if( tagName.EndsWith( "Background Pattern" ) )
        {
            return tagName.Substring( 0, tagName.Length - " Background Pattern".Length );
        }
        else if( tagName.EndsWith( "Pattern" ) )
        {
            return tagName.Substring( 0, tagName.Length - " Pattern".Length );
        }
        else if( tagName.EndsWith( "Background" ) )
        {
            return tagName.Substring( 0, tagName.Length - " Background".Length );
        }
        else if( tagName.EndsWith( "Outline" ) )
        {
            return tagName.Substring( 0, tagName.Length - " Outline".Length );
        }
        else
        {
            return tagName;
        }
    }
}
@{
    string rootDir = Model.Site.SourceFolder;
    DirectoryInfo imageDir = new DirectoryInfo( Path.Combine( "static", "bettas" ) );
    long totalFileSize = 0;
    foreach( FileInfo file in imageDir.EnumerateFiles() )
    {
        totalFileSize += file.Length;
    }
}
# HELP bettadelic_post_total Total number of bettas that have been posted
# TYPE bettadelic_post_total counter
bettadelic_post_total @Model.Site.Posts.Count()
# HELP bettadelic_image_size_total Total file size all images take up in bytes.
# TYPE bettadelic_image_size_total gauge
bettadelic_image_size_total @totalFileSize
# HELP bettadelic_tag_total Total number of posts that fit in a particular tag. tag is the full tag name, category is what group of tags it is a part of, name_without_category is the tag name with the category removed.
# TYPE bettadelic_tag_total counter
@foreach( var tagCount in tagDict )
{
@:bettadelic_tag_total{tag="@(tagCount.Key)",category="@(GetCategory(tagCount.Key))",name_without_category="@(GetDisplayName(tagCount.Key))"} @(tagCount.Value)
}
